version: "3.8"

services:
  # PostgreSQL Database with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: ai-ta-postgres
    environment:
      - POSTGRES_DB=ai_ta
      - POSTGRES_USER=ai_ta_user
      - POSTGRES_PASSWORD=ai_ta_password
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_ta_user -d ai_ta"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # LocalStack for AWS S3 emulation
  localstack:
    image: localstack/localstack:latest
    container_name: ai-ta-localstack
    environment:
      - SERVICES=s3
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - DOCKER_HOST=unix:///var/run/docker.sock
      - AWS_DEFAULT_REGION=ca-central-1
    ports:
      - "4566:4566"
    volumes:
      - localstack_data:/tmp/localstack
      - ./docker/init_s3.sh:/etc/localstack/init/ready.d/init_s3.sh
    networks:
      - app-network

  # Redis for caching (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: ai-ta-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - app-network

  # Main application server
  server:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: ai-ta-server
    environment:
      - DATABASE_URL=postgresql://ai_ta_user:ai_ta_password@postgres:5432/ai_ta
      - AWS_ENDPOINT_URL=http://localstack:4566
      - AWS_ACCESS_KEY_ID=AKIAQ3EGWOCKOKV7IVP4
      - AWS_SECRET_ACCESS_KEY=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
      - AWS_DEFAULT_REGION=ca-central-1
      - S3_BUCKET_NAME=ai-ta-storage
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - UPLOAD_FOLDER=/app/uploads
    volumes:
      - ./src:/app/src
      - ./config:/app/config
      - ./uploads:/app/uploads
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      localstack:
        condition: service_started
      redis:
        condition: service_started
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_data:
  localstack_data:
  redis_data:

networks:
  app-network:
    driver: bridge
